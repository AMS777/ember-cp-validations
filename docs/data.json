{
    "project": {
        "name": "Ember CP Validations",
        "description": "Ember computed property based validations",
        "url": "https://github.com/offirgolan/ember-cp-validations",
        "version": "2.9.3.500f85ac"
    },
    "files": {
        "addon/utils/assign.js": {
            "name": "addon/utils/assign.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/cycle-breaker.js": {
            "name": "addon/utils/cycle-breaker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/flatten.js": {
            "name": "addon/utils/flatten.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/meta-data.js": {
            "name": "addon/utils/meta-data.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/should-call-super.js": {
            "name": "addon/utils/should-call-super.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/utils.js": {
            "name": "addon/utils/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/error.js": {
            "name": "addon/validations/error.js",
            "modules": {},
            "classes": {
                "Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/factory.js": {
            "name": "addon/validations/factory.js",
            "modules": {
                "Validations": 1
            },
            "classes": {
                "Factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/internal-result-object.js": {
            "name": "addon/validations/internal-result-object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/result-collection.js": {
            "name": "addon/validations/result-collection.js",
            "modules": {},
            "classes": {
                "ResultCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/result.js": {
            "name": "addon/validations/result.js",
            "modules": {},
            "classes": {
                "Result": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/validator.js": {
            "name": "addon/validations/validator.js",
            "modules": {
                "Validators": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/alias.js": {
            "name": "addon/validators/alias.js",
            "modules": {},
            "classes": {
                "Alias": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/base.js": {
            "name": "addon/validators/base.js",
            "modules": {},
            "classes": {
                "Base": 1,
                "Custom": 1,
                "Inline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/belongs-to.js": {
            "name": "addon/validators/belongs-to.js",
            "modules": {},
            "classes": {
                "Belongs To": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/collection.js": {
            "name": "addon/validators/collection.js",
            "modules": {},
            "classes": {
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/confirmation.js": {
            "name": "addon/validators/confirmation.js",
            "modules": {},
            "classes": {
                "Confirmation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/date.js": {
            "name": "addon/validators/date.js",
            "modules": {},
            "classes": {
                "Date": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/dependent.js": {
            "name": "addon/validators/dependent.js",
            "modules": {},
            "classes": {
                "Dependent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/ds-error.js": {
            "name": "addon/validators/ds-error.js",
            "modules": {},
            "classes": {
                "DS Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/exclusion.js": {
            "name": "addon/validators/exclusion.js",
            "modules": {},
            "classes": {
                "Exclusion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/format.js": {
            "name": "addon/validators/format.js",
            "modules": {},
            "classes": {
                "Format": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/has-many.js": {
            "name": "addon/validators/has-many.js",
            "modules": {},
            "classes": {
                "Has Many": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/inclusion.js": {
            "name": "addon/validators/inclusion.js",
            "modules": {},
            "classes": {
                "Inclusion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/length.js": {
            "name": "addon/validators/length.js",
            "modules": {},
            "classes": {
                "Length": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/messages.js": {
            "name": "addon/validators/messages.js",
            "modules": {},
            "classes": {
                "Messages": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/number.js": {
            "name": "addon/validators/number.js",
            "modules": {},
            "classes": {
                "Number": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/presence.js": {
            "name": "addon/validators/presence.js",
            "modules": {},
            "classes": {
                "Presence": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/index.js": {
            "name": "addon/index.js",
            "modules": {
                "Home": 1,
                "Basic Usage": 1,
                "Advanced Usage": 1,
                "I18n Solutions": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/validators/messages.js": {
            "name": "app/validators/messages.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "htmlbars-plugins/v-get.js": {
            "name": "htmlbars-plugins/v-get.js",
            "modules": {
                "Templating": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Validations": {
            "name": "Validations",
            "submodules": {},
            "elements": {},
            "classes": {
                "Error": 1,
                "Factory": 1,
                "ResultCollection": 1,
                "Result": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "addon/validations/result.js",
            "line": 24,
            "description": "## Running Manual Validations\n\nAlthough validations are lazily computed, there are times where we might want to force all or\nspecific validations to happen. For this reason we have exposed two methods:\n- {{#crossLink \"Factory/validateSync:method\"}}{{/crossLink}}: Should only be used if all validations are synchronous. It will throw an error if any of the validations are asynchronous\n- {{#crossLink \"Factory/validate:method\"}}{{/crossLink}}: Will always return a promise and should be used if asynchronous validations are present\n\n## Inspecting Validations\n\nAll validations can be accessed via the `validations` object created on your model/object.\nEach attribute also has its own validation which has the same properties.\nAn attribute validation can be accessed via `validations.attrs.<ATTRIBUTE>` which will return a {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n### Global Validations\n\nGlobal validations exist on the `validations` object that resides on the object that is being validated.\nTo see all possible properties, please checkout the docs for {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n```js\nmodel.get('validations.isValid');\nmodel.get('validations.errors');\nmodel.get('validations.messages');\n// etc...\n```\n\n### Attribute Validations\n\nThe `validations` object also contains an `attrs` object which holds a {{#crossLink \"ResultCollection\"}}{{/crossLink}}\nfor each attribute specified in your validation rules.\n\n```js\nmodel.get('validations.attrs.username.isValid');\nmodel.get('validations.attrs.password.errors');\nmodel.get('validations.attrs.email.messages');\n// etc...\n```",
            "itemtype": "main",
            "access": "private",
            "tagname": ""
        },
        "Validators": {
            "name": "Validators",
            "submodules": {},
            "elements": {},
            "classes": {
                "Alias": 1,
                "Base": 1,
                "Custom": 1,
                "Inline": 1,
                "Belongs To": 1,
                "Collection": 1,
                "Confirmation": 1,
                "Date": 1,
                "Dependent": 1,
                "DS Error": 1,
                "Exclusion": 1,
                "Format": 1,
                "Has Many": 1,
                "Inclusion": 1,
                "Length": 1,
                "Messages": 1,
                "Number": 1,
                "Presence": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "addon/validators/presence.js",
            "line": 15,
            "description": "## Common Options\n\n<h3 id=\"description\">description</h3>\nA descriptor for your attribute used in the error message strings. Defaults to `This field'`.\nYou can overwrite this value in your `validators/messages.js` file by changing the `defaultDescription` property.\n\n```javascript\n// Examples\nvalidator('date', {\n  description: 'Date of birth'\n})\n// If validation is run and the attribute is empty, the error returned will be:\n// 'Date of birth can't be blank'\n```\n\n<h3 id=\"dependentKeys\">dependentKeys</h3>\nA list of other model specific dependents for you validator.\n\n```javascript\n// Examples\nvalidator('has-friends', {\n  dependentKeys: ['friends.[]']\n})\nvalidator('has-valid-friends', {\n  dependentKeys: ['friends.@each.username']\n})\nvalidator('x-validator', {\n  dependentKeys: ['username', 'email', 'meta.foo.bar']\n})\n```\n\n<h3 id=\"disabled\">disabled</h3>\nIf set to `true`, disables the given validator. This option would usually go hand-in-hand\nwith {{#crossLinkModule 'Advanced Usage'}}options as functions{{/crossLinkModule}} and `dependentKeys`. Defaults to `false`.\n\n```js\n// Examples\nvalidator('presence', {\n  presence: true,\n  disabled: true\n})\nvalidator('presence', {\n  presence: true,\n  dependentKeys: ['shouldValidate'],\n  disabled(model, attribute) {\n    return !model.get('shouldValidate');\n  }\n})\n```\n\n<h3 id=\"debounce\">debounce</h3>\nDebounces the validation with the given time in `milliseconds`. All debounced validations will be handled asynchronously (wrapped in a promise).\n\n```javascript\n// Examples\nvalidator('length', {\n  debounce: 500\n})\nvalidator('x-validator', {\n  debounce: 250\n})\n```\n\n<h3 id=\"value\">value</h3>\nUsed to retrieve the value to validate. This will overwrite the validator's default `value` method.\nBy default this returns `model[attribute]`. If you are dependent on other model attributes, you will\nneed to add them as `dependentKeys`.\n\n```javascript\n// Examples\nvalidator('date', {\n  value(model, attribute) {\n  \t// Format the orignal value before passing it into the validator\n  \treturn moment().utc(model.get(attribute)).format('DD/MM/YYY');\n  }\n})\nvalidator('number', {\n\t dependentKeys: ['someOtherAttr'],\n  value(model, attribute) {\n  \t// Validate a value that is not the current attribute\n  \treturn this.get('model').get('someOtherAttr');\n  }\n})\n```\n\n<h3 id=\"message\">message</h3>\nThis option can take two forms. It can either be a `string` or a `function`. If a string is used, then it will overwrite all error message types for the specified validator.\n\n```javascript\n// Example: String\nvalidator('confirmation', {\n  message: 'Email does not match {attribute}. What are you even thinking?!'\n})\n```\n\nWe can pass a `function` into our message option for even more customization capabilities.\n\n```javascript\n// Example: Function\nvalidator('date', {\n  message: function(type, options, value, context) {\n    if (type === 'before') {\n      return '{description} should really be before {date}';\n    }\n    if (type === 'after') {\n      return '{description} should really be after {date}';\n    }\n  }\n})\n```\nThe message function is given the following arguments:\n\n- `type` (**String**): The error message type\n- `options` (**Object**): The validator options that were defined in the model\n- `value`: The current value being evaluated\n- `context` (**Object**): Context for string replacement\n\nThe return value must be a `string`. If nothing is returned (`undefined`), defaults to the default error message of the specified type.\n\nWithin this function, the context is set to that of the current validator. This gives you access to the model, defaultMessages, options and more.",
            "itemtype": "main"
        },
        "Home": {
            "name": "Home",
            "submodules": {
                "Basic Usage": 1,
                "Advanced Usage": 1,
                "I18n Solutions": 1
            },
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/index.js",
            "line": 9,
            "description": "## Installation\n```shell\nember install ember-cp-validations\n```\n\n## Changelog\nChangelog can be found [here](https://github.com/offirgolan/ember-cp-validations/blob/master/CHANGELOG.md)\n\n## Live Demo\nA live demo can be found [here](http://offirgolan.github.io/ember-cp-validations/)\n\n## Looking for help?\nIf it is a bug [please open an issue on GitHub](http://github.com/offirgolan/ember-cp-validations/issues)."
        },
        "Basic Usage": {
            "name": "Basic Usage",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Home",
            "namespace": "",
            "file": "addon/index.js",
            "line": 27,
            "description": "<h2 id=\"models\">Models</h2>\n\nThe first thing we need to do it build our validation rules. This will then generate a Mixin that you will be able to incorporate into your model or object.\n\n```javascript\n// models/user.js\n\nimport Ember from 'ember';\nimport DS from 'ember-data';\nimport { validator, buildValidations } from 'ember-cp-validations';\n\nconst Validations = buildValidations({\n  username: validator('presence', true),\n  password: [\n    validator('presence', true),\n    validator('length', {\n      min: 4,\n      max: 8\n    })\n  ],\n  email: [\n    validator('presence', true),\n    validator('format', { type: 'email' })\n  ],\n  emailConfirmation: [\n    validator('presence', true),\n    validator('confirmation', {\n      on: 'email',\n      message: '{description} do not match',\n      description: 'Email addresses'\n    })\n  ]\n});\n```\n\nOnce our rules are created and our Mixin is generated, all we have to do is add it to our model.\n\n```javascript\n// models/user.js\n\nexport default DS.Model.extend(Validations, {\n  'username': attr('string'),\n  'password': attr('string'),\n  'email': attr('string')\n});\n```\n\n<h2 id=\"objects\">Objects</h2>\n\nYou can also use the generated `Validations` mixin on any `Ember.Object` or child\nof `Ember.Object`, like `Ember.Component`. For example:\n\n```javascript\n// components/x-foo.js\n\nimport Ember from 'ember';\nimport { validator, buildValidations } from 'ember-cp-validations';\n\nconst Validations = buildValidations({\n  bar: validator('presence', true)\n});\n\nexport default Ember.Component.extend(Validations, {\n  bar: null\n});\n```\n\nTo lookup validators, container access is required which can cause an issue with `Ember.Object` creation if the object is statically imported. The current fix for this is as follows.\n\n```javascript\n// models/user.js\n\nexport default Ember.Object.extend(Validations, {\n  username: null\n});\n```\n\n**Ember < 2.3.0-beta.1**\n\n```javascript\n// routes/index.js\n\nimport User from '../models/user';\n\nexport default Ember.Route.extend({\n  model() {\n    var container = this.get('container');\n    return User.create({ username: 'John', container })\n  }\n});\n```\n\n**Ember >= 2.3.0-beta.2**\n\n```javascript\n// routes/index.js\n\nimport User from '../models/user';\n\nexport default Ember.Route.extend({\n  model() {\n    return User.create(\n     Ember.getOwner(this).ownerInjection(),\n     { username: 'John' }\n    );\n  }\n});\n```"
        },
        "Advanced Usage": {
            "name": "Advanced Usage",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Home",
            "namespace": "",
            "file": "addon/index.js",
            "line": 141,
            "description": "<h3 id=\"defaultOptions\">Default Options</h3>\n\nDefault options can be specified over a set of validations for a given attribute. Local properties will always take precedence.\n\nInstead of doing the following:\n\n```javascript\nconst Validations = buildValidations({\n  username: [\n    validator('presence', {\n      presence: true,\n      description: 'Username'\n    }),\n    validator('length', {\n      min: 1,\n      description: 'Username'\n    }),\n    validator('no-whitespace-around', {\n      description: 'A username'\n    })\n  ]\n});\n```\n\nWe can declare default options:\n\n```javascript\nconst Validations = buildValidations({\n  username: {\n    description: 'Username'\n    validators: [\n      validator('presence', true),\n      validator('length', {\n        min: 1\n      }),\n      validator('no-whitespace-around', {\n        description: 'A username'\n      })\n    ]\n  },\n});\n```\n\nIn the above example, all the validators for username will have a description of `Username` except that of the `no-whitespace-around` validator which will be `A username`.\n\n<h3 id=\"globalOptions\">Global Options</h3>\n\nIf you have  specific options you want to propagate throught all your validation rules, you can do so by passing in a global options object.\nThis is ideal for when you have a dependent key that each validator requires such as the current locale from your i18n implementation, or\nyou want easily toggle your validations on/off.\n\n```javascript\nconst Validations = buildValidations(validationRules, globalOptions);\n```\n\n```javascript\nimport Ember from 'ember';\nimport { validator, buildValidations } from 'ember-cp-validations';\n\nconst Validations = buildValidations({\n  firstName: {\n    description: 'First Name'\n    validators: [\n      validator('presence', {\n        presence: true,\n        dependentKeys: ['foo', 'bar']\n      })\n     ]\n   },\n  lastName: validator('presence', true)\n}, {\n  description: 'This field'\n  dependentKeys: ['i18n.locale', 'disableValidations'],\n  disabled(model, attribute) {\n    return model.get('disableValidations');\n  }\n});\n```\n\nJust like in the default options, locale validator options will always take precedence over default options and default options will always take precedence\nover global options. This allows you to declare global rules while having the ability to override them in lower levels.\n\nThis rule does not apply to `dependentKeys`, instead they all are merged. In the example above, __firstName__'s dependentKeys will be\n`['i18n.locale', 'disableValidations', 'foo', 'bar']`\n\n<h3 id=\"optionsAsFunctions\">Options as Functions</h3>\n\nAll options can be functions which are processed lazily before validate is called. These functions are passed the `model` and `attribute` that is associated with\nthe validator while also given that as their context, giving you access to all its properties.\n\nPlease note that the `message` option of a validator has its [own signature](http://offirgolan.github.io/ember-cp-validations/docs/modules/Validators.html#message).\n\n```javascript\nconst Validations = buildValidations({\n  dob: validator('date', {\n    description: 'Date of Birth',\n    format(model, attribute) {\n      return model.get('meta.date.format');\n    },\n    before(model, attribute) {\n      return moment();\n    },\n    after(model, attribute) {\n      return moment().subtract(120, 'years');\n    }\n  })\n});\n```\n\n<h3 id=\"nestedKeys\">Nested Keys</h3>\n\nWhen declaring object validations (not including Ember Data models), it is possible to validate child objects from the parent object.\n\n```javascript\nimport Ember from 'ember';\nimport { validator, buildValidations } from 'ember-cp-validations';\n\nconst Validations = buildValidations({\n  'acceptTerms': validator('inclusion', { in: [ true ] }),\n  'user.firstName': validator('presence', true),\n  'user.lasName': validator('presence', true),\n  'user.account.number': validator('number')\n});\n\nexport default Ember.Component.extend(Validations, {\n  acceptTerms: false,\n  user:  {\n    firstName: 'John',\n    lastName: 'Doe' ,\n    account: {\n      number: 123456,\n    }\n  },\n  isFormValid: Ember.computed.alias('validations.isValid'),\n});\n```"
        },
        "I18n Solutions": {
            "name": "I18n Solutions",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Home",
            "namespace": "",
            "file": "addon/index.js",
            "line": 283,
            "description": "## [__Ember-Intl__](https://github.com/jasonmit/ember-intl-cp-validations)\n\n ```bash\n ember install ember-intl-cp-validations\n ```\n\n## [__Ember-I18n__](https://github.com/jasonmit/ember-i18n-cp-validations)\n\n```bash\n ember install ember-i18n-cp-validations\n```"
        },
        "Templating": {
            "name": "Templating",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "htmlbars-plugins/v-get.js",
            "line": 1,
            "description": "Accessing validation information in your templates is really simple but the pathing can be quite long. For example, if we want to display the error `message` for the `username` attribute, it would look something like this:\n\n```handlebars\n{{model.validations.attrs.username.message}}\n```\n\n## The V-Get Helper\nTo bypass such long pathing, you can use the `v-get` helper.\n\n_**Notice**: Ember v1.13.0 is not supported due to a bug. Please use Ember v1.13.1 and higher or Ember v1.12.* and lower_\n\n**Access global model properties**\n\n```handlebars\n{{v-get model 'isValid'}}\n```\n\n**Access attribute specific properties**\n\n```handlebars\n{{v-get model 'username' 'message'}}\n```\n\n**Access model relationship validations**\n\nSay we have a `user` model with a `details` attribute that is a belongsTo relationship, to access validations on the `details` attribute/model we can access it as such.\n\n```handlebars\n{{v-get model.details 'isValid'}}\n{{v-get model.details 'firstName' 'message'}}\n```\n\nWhat's awesome about this is that you can pass in bound properties!\n\n```handlebars\n{{v-get model attr prop}}\n{{v-get model prop}}\n```\n\nHere is a more extensive example:\n```handlebars\n<form>\n  {{input value=model.username placeholder=\"Username\"}}\n  {{#if (v-get model 'username' 'isInvalid')}}\n    <div class=\"error\">\n      {{v-get model 'username' 'message'}}\n    </div>\n  {{/if}}\n\n  <button type=\"submit\" disabled={{v-get model 'isInvalid'}}>Submit</button>\n</form>\n```",
            "itemtype": "main"
        }
    },
    "classes": {
        "Error": {
            "name": "Error",
            "shortname": "Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/error.js",
            "line": 3
        },
        "Factory": {
            "name": "Factory",
            "shortname": "Factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/factory.js",
            "line": 44,
            "description": "## Running Manual Validations\n\nAlthough validations are lazily computed, there are times where we might want to force all or\nspecific validations to happen. For this reason we have exposed two methods:\n- {{#crossLink \"Factory/validateSync:method\"}}{{/crossLink}}: Should only be used if all validations are synchronous. It will throw an error if any of the validations are asynchronous\n- {{#crossLink \"Factory/validate:method\"}}{{/crossLink}}: Will always return a promise and should be used if asynchronous validations are present\n\n## Inspecting Validations\n\nAll validations can be accessed via the `validations` object created on your model/object.\nEach attribute also has its own validation which has the same properties.\nAn attribute validation can be accessed via `validations.attrs.<ATTRIBUTE>` which will return a {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n### Global Validations\n\nGlobal validations exist on the `validations` object that resides on the object that is being validated.\nTo see all possible properties, please checkout the docs for {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n```js\nmodel.get('validations.isValid');\nmodel.get('validations.errors');\nmodel.get('validations.messages');\n// etc...\n```\n\n### Attribute Validations\n\nThe `validations` object also contains an `attrs` object which holds a {{#crossLink \"ResultCollection\"}}{{/crossLink}}\nfor each attribute specified in your validation rules.\n\n```js\nmodel.get('validations.attrs.username.isValid');\nmodel.get('validations.attrs.password.errors');\nmodel.get('validations.attrs.email.messages');\n// etc...\n```",
            "mainName": "Validations",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ResultCollection": {
            "name": "ResultCollection",
            "shortname": "ResultCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/result-collection.js",
            "line": 32
        },
        "Result": {
            "name": "Result",
            "shortname": "Result",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/result.js",
            "line": 24,
            "description": "This class is `private` and is only used by {{#crossLink 'ResultCollection'}}{{/crossLink}}"
        },
        "Alias": {
            "name": "Alias",
            "shortname": "Alias",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/alias.js",
            "line": 14,
            "description": "Creates an alias between a single attribute's validations to another.\nThis copies all messages, errors, etc., to the current attribute as well as\nits validation state (isValid, isValidating, etc.)\n\n #### Options\n- `firstMessageOnly` (**Boolean**): If true, only returns the first error message of the\naliased attribute and will not include validation state\n\n```javascript\n// Examples\nvalidator('alias', 'attribute')\nvalidator('alias', {\n  alias: 'attribute',\n  firstMessageOnly: true\n})\n```",
            "extends": "Base"
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/base.js",
            "line": 19
        },
        "Custom": {
            "name": "Custom",
            "shortname": "Custom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/base.js",
            "line": 252,
            "description": "Creating custom validators is very simple. To generate a validator named `unique-username` in Ember CLI\n\n```bash\nember generate validator unique-username\n```\n\nThis will create the following files\n\n* `app/validators/unique-username.js`\n* `tests/unit/validators/unique-username-test.js`\n\n```javascript\n// app/validators/unique-username.js\n\nimport BaseValidator from 'ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({\n  validate(value, options, model, attribute) {\n    return true;\n  }\n});\n\nUniqueUsername.reopenClass({\n  getDependentsFor(attribute, options) {\n    return [];\n  }\n});\n\nexport default UniqueUsername;\n```\n\n**Side Node**: Before we continue, I would suggest checking out the documentation for the {{#crossLink 'Base'}}Base Validator{{/crossLink}}.\n\nIf you want to interact with the `store` within your validator, you can simply inject the service like you would a component.\nSince you have access to your model and the current value, you should be able to send the server the right information to determine if this username is unique.\n\n```javascript\n// app/validators/unique-username.js\n\nimport Ember from 'ember';\nimport BaseValidator from 'ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({\n  store: Ember.inject.service(),\n\n  validate(value, options, model, attribute) {\n    return this.get('store').findRecord('user', value).then((user) => {\n      if(user && user.id === value) {\n        let message = `The username '${value}' already exists.`;\n        let meta = user.get('meta');\n\n        if(options.showSuggestions && meta && meta.suggestions) {\n          message += \"What about one of the these: \" + meta.suggestions.join(', ');\n        }\n        return message;\n      } else {\n        return true;\n      }\n    })\n  }\n});\n```\n\n## Dependent Keys\n\nThere will be times when your validator will be dependent on some other property or object. Instead of having to\ninclude them in your option's `dependentKeys`, you can declare them in the static `getDependentsFor` hook. This hook\nrecieves two parameters. The first is the `attribute` that this validator is being added to, and the second are the `options`\nthere were passed to this validator.\n\nFrom the above code sample:\n\n```javascript\n// app/validators/unique-username.js\n\nimport BaseValidator from 'ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({});\n\nUniqueUsername.reopenClass({\n  getDependentsFor(attribute, options) {\n    return [];\n  }\n});\n\nexport default UniqueUsername;\n```\n\nAll dependent keys are in reference to the model's `validations.attrs` object. So when you return `['username']`,\nit will add a dependent to `model.validations.attrs.username`. If you want to add a dependent on the model, your\nkey needs to be prefixed with `_model`. So when you return `['_model.username']`, it will add a dependent to `model.username`.\nThis means that if you have a dependent on a service, that service must be injected into the model since returning `['_model.myService.someProperty']`\nwill be interpreted as `model.myService.someProperty`.\n\n## Usage\n\nTo use our unique-username validator we just have to add it to the model definition\n\n```javascript\nvar Validations = buildValidations({\n  username: validator('unique-username', {\n    showSuggestions: true\n  }),\n});\n\nexport default DS.Model.extend(Validations, {\n  'username': DS.attr('string'),\n});\n```\n\n## Testing\nAs mentioned before, the generator created a unit test for your new custom validator.\n\n```javascript\n// tests/unit/validators/unique-username-test.js\n\nimport Ember from 'ember';\nimport { moduleFor, test } from 'ember-qunit';\n\nmoduleFor('validator:unique-username', 'Unit | Validator | unique-username', {\n    needs: ['validator:messages']\n});\n\ntest('it works', function(assert) {\n    var validator =  this.subject();\n    assert.ok(validator);\n});\n```\n\nA simple test for our validation method can be as such\n\n```javascript\ntest('username is unique', function(assert) {\n    assert.expect(1);\n\n    let validator =  this.subject();\n    let done = assert.async();\n\n    validator.validate('johndoe42').then((message) => {\n      assert.equal(message, true);\n      done();\n    });\n});\n```",
            "extends": "Base"
        },
        "Inline": {
            "name": "Inline",
            "shortname": "Inline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/base.js",
            "line": 402,
            "description": "A validator can also be declared with an inline function. The function will be then wrapped in the {{#crossLink 'Base'}}Base Validator{{/crossLink}} class and used just like any other pre-defined validator.\n\n```javascript\n// Example\nvalidator(function(value, options, model, attribute) {\n  return value === options.username ? true : `must be ${options.username}`;\n} , {\n  username: 'John' // Any options can be passed here\n})\n```",
            "extends": "Base"
        },
        "Belongs To": {
            "name": "Belongs To",
            "shortname": "Belongs To",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/belongs-to.js",
            "line": 15,
            "description": "Identifies a `belongs-to` relationship in an Ember Data Model or Ember.Object.\nThis is used to create a link to the validations object of the child model.\n\n_**Note:** Validations must exist on **both** models/objects_\n\n### Ember Model\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  details: validator('belongs-to')\n});\n\nexport default DS.Model.extend(Validations, {\n  'details': DS.belongsTo('user-detail')\n});\n```\n\n```javascript\n// model/user-details.js\n\nconst Validations = buildValidations({\n  firstName: validator('presence', true),\n  lastName: validator('presence', true)\n});\n\nexport default DS.Model.extend(Validations, {\n  \"firstName\": attr('string'),\n  \"lastName\": attr('string'),\n});\n```\n\n### Ember Object\n\n```javascript\n// model/users.js\n\nimport UserDetails from '../user-details';\n\nconst Validations = buildValidations({\n  details: validator('belongs-to')\n});\n\nexport default Ember.Object.extend(Validations, {\n  details: null,\n\n  init() {\n    this._super(...arguments);\n    let owner = Ember.getOwner(this);\n    this.set('details', UserDetails.create(owner.ownerInjection()));\n  }\n});\n```\n\nFrom our `user` model, we can now check any validation propery on the `user-details` model.\n\n```javascript\nget(model, 'validations.attrs.details.isValid')\nget(model, 'validations.attrs.details.messages')\n```",
            "extends": "Base"
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/collection.js",
            "line": 13,
            "description": "If `true` validates that the given value is a valid collection and will add `<ATTRIUTE>.[]` as a dependent key to the CP.\nIf `false`, validates that the given value is singular. Use this validator if you want validation to occur when the content of your collection changes.\n\n```javascript\n// Examples\nvalidator('collection', true)\nvalidator('collection', false)\nvalidator('collection', {\n  collection: true,\n  message: 'must be a collection'\n})\n```",
            "extends": "Base"
        },
        "Confirmation": {
            "name": "Confirmation",
            "shortname": "Confirmation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/confirmation.js",
            "line": 15,
            "description": "You should use this validator when you have two text fields that should receive exactly the same content.\nFor example, you may want to confirm an email address or a password. This validator doesnt have to be created on an attribute defined in your model.\nThis means that when you save your model, in this case, `verfiedEmail` will not be part of the payload.\n\n```javascript\n// Example\nemail: validator('format', {\n  type: 'email'\n})\nverifiedEmail: validator('confirmation', {\n  on: 'email',\n  message: 'do not match',\n  description: 'Email addresses'\n})\n```",
            "extends": "Base"
        },
        "Date": {
            "name": "Date",
            "shortname": "Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/date.js",
            "line": 20,
            "description": "Validate over a date range. Uses [MomentJS](http://momentjs.com/) for date mathematics and calculations.\n\n-*Note**: MomentJS must be installed to be able to use this validator. The easiest way to do this is to install [ember-moment](https://github.com/stefanpenner/ember-moment)\n\n #### Options\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `before` (**String**): The specified date must be before this date\n- `onOrBefore` (**String**): The specified date must be on or before this date\n- `after` (**String**): The specified date must be after this date\n- `onOrAfter` (**String**): The specified date must be on or after this date\n- `precision` (**String**): Limit the comparison check to a specific granularity. Options: year, month, week, day, hour, minute, second.\n- `format` (**String**): Input value date format\n- `errorFormat` (**String**): Error output date format. Defaults to `MMM Do, YYYY`\n\n```javascript\n// Example\nvalidator('date', {\n    after: 'now',\n    before: '1/1/2020',\n    precision: 'day',\n    format: 'M/D/YYY',\n    errorFormat: 'M/D/YYY'\n})\n// If before, onOrBefore, after, or onOrAfter is set to 'now', the value given to the validator will be tested against the current date and time.\n```",
            "extends": "Base"
        },
        "Dependent": {
            "name": "Dependent",
            "shortname": "Dependent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/dependent.js",
            "line": 15,
            "description": "Defines an attribute as valid only if its dependents are valid.\n\n #### Options\n- `on` (**Array**): Attributes this field is dependent on\n\n```javascript\n// Example\n// Full name will only be valid if firstName and lastName are filled in\nvalidator('dependent', {\n    on: ['firstName', 'lastName'],\n})\n```",
            "extends": "Base"
        },
        "DS Error": {
            "name": "DS Error",
            "shortname": "DS Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/ds-error.js",
            "line": 19,
            "description": "Creates a link between this library and Ember-Data's [DS.Errors](http://emberjs.com/api/data/classes/DS.Errors.html)\nto fetch the latest message for the given attribute.\n\n```javascript\n// Examples\nvalidator('ds-error')\n```",
            "extends": "Base"
        },
        "Exclusion": {
            "name": "Exclusion",
            "shortname": "Exclusion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/exclusion.js",
            "line": 14,
            "description": "Validates that the attributes’ values are not included in a given list. All comparisons are done using strict equality so type matters! For range, the value type is checked against both lower and upper bounds for type equality.\n\n #### Options\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `in` (**Array**): The list of values this attribute should not be\n- `range` (**Array**): The range in which the attribute's value should not reside in\n\n```javascript\n// Examples\nvalidator('exclusion', {\n    in: ['Admin', 'Super Admin']\n})\nvalidator('exclusion', {\n    range: [0, 5] // Cannot be between 0 (inclusive) to 5 (inclusive)\n})\n```",
            "extends": "Base"
        },
        "Format": {
            "name": "Format",
            "shortname": "Format",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/format.js",
            "line": 15,
            "description": "Validate over a predefined or custom regular expression.\n\n #### Options\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `type` (**String**): Can be the one of the following options [`email`, `phone`, `url`]\n- `regex` (**RegExp**): The regular expression to test against\n\n```javascript\n// Examples\nvalidator('format', {\n  type: 'email'\n})\nvalidator('format', {\n  allowBlank: true,\n  type: 'phone'\n})\nvalidator('format', {\n  type: 'url'\n})\nvalidator('format', {\n    regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/,\n    message: 'Password must include at least one upper case letter, one lower case letter, and a number'\n})\n```\n\nIf you do not want to use the predefined regex for a specific type, you can do something like this\n\n```javascript\n// Example\nvalidator('format', {\n  type: 'email',\n  regex: /My Better Email Regexp/\n})\n```\nThis allows you to still keep the email error message but with your own custom regex.",
            "extends": "Base"
        },
        "Has Many": {
            "name": "Has Many",
            "shortname": "Has Many",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/has-many.js",
            "line": 13,
            "description": "Identifies a `has-many` relationship in an Ember Data Model or Ember.Object.\nThis is used to create a validation collection of the `has-many` validations.\n\n_**Note:** Validations must exist on **all** models/objects_\n\n### Ember Models\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  friends: validator('has-many')\n});\n\nexport default DS.Model.extend(Validations, {\n  friends: DS.hasMany('user')\n});\n```\n\n### Ember Objects\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  friends: validator('has-many')\n});\n\nexport default Ember.Object.extend(Validations, {\n  friends: null\n});\n```\n\nFrom our `user` model, we can now check validation properties on the `friends` attribute.\n\n```javascript\nget(model, 'validations.attrs.friends.isValid')\nget(model, 'validations.attrs.friends.messages')\n```",
            "extends": "Base"
        },
        "Inclusion": {
            "name": "Inclusion",
            "shortname": "Inclusion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/inclusion.js",
            "line": 14,
            "description": "Validates that the attributes’ values are included in a given list. All comparisons are done using strict equality so type matters!\nFor range, the value type is checked against both lower and upper bounds for type equality.\n\n #### Options\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `in` (**Array**): The list of values this attribute could be\n- `range` (**Array**): The range in which the attribute's value should reside in\n\n```javascript\n// Examples\nvalidator('inclusion', {\n    in: ['User', 'Admin']\n})\nvalidator('inclusion', {\n    range: [0, 5] // Must be between 0 (inclusive) to 5 (inclusive)\n})\n```\n\nBecause of the strict equality comparisons, you can use this validator in many different ways.\n\n```javascript\n// Examples\nvalidator('inclusion', {\n    in: ['Admin'] // Input must be equal to 'Admin'\n})\nvalidator('inclusion', {\n    range: [0, Infinity] // Input must be positive number\n})\nvalidator('inclusion', {\n    range: [-Infinity, Infinity] // Input must be a number\n})\n```",
            "extends": "Base"
        },
        "Length": {
            "name": "Length",
            "shortname": "Length",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/length.js",
            "line": 15,
            "description": "Validates the length of the attributes’ values.\n\n #### Options\n- `allowNone` (**Boolean**): If true, skips validation if the value is null or undefined. __Default: true__\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `is` (**Number**): The exact length the value can be\n- `min` (**Number**): The minimum length the value can be\n- `max` (**Number**): The maximum length the value can be\n\n```javascript\n// Examples\nvalidator('length', {\n  is: 15\n})\nvalidator('length', {\n    min: 5,\n    max: 10\n})\n```",
            "extends": "Base"
        },
        "Messages": {
            "name": "Messages",
            "shortname": "Messages",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/messages.js",
            "line": 12,
            "description": "The default validation error messages are imported in your app's `validators` folder.\nIf you want to change or extend them, all you need to do is create a `messages.js` file under `app/validators`.\n\n```javascript\n// app/validators/messages.js\n\nimport Messages from 'ember-cp-validations/validators/messages';\n\nexport default Messages.extend({\n  uniqueUsername: '{description} {username} already exists'\n});\n```\n\nWithin this object, you can overwrite the [default messages](https://github.com/offirgolan/ember-cp-validations/blob/master/addon/validators/messages.js) or create new messages just like in the example above.\nIf a message of a given type is not found, it will default to the `invalid` message.\nUsage examples can be found {{#crossLink \"Base/createErrorMessage:method\"}}here{{/crossLink}}"
        },
        "Number": {
            "name": "Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/number.js",
            "line": 13,
            "description": "Validates that your attributes have only numeric values.\n\n #### Options\n- `allowBlank` (**Boolean**): If true, skips validation if the value is empty\n- `allowString` (**Boolean**): If true, validator will accept string representation of a number\n- `integer` (**Boolean**): Number must be an integer\n- `positive` (**Boolean**): Number must be greater than 0\n- `odd` (**Boolean**): Number must be odd\n- `even` (**Boolean**): Number must be even\n- `is` (**Number**): Number must be equal to this value\n- `lt` (**Number**): Number must be less than this value\n- `lte` (**Number**): Number must be less than or equal to this value\n- `gt` (**Number**): Number must be greater than this value\n- `gte` (**Number**): Number must be greater than or equal to this value\n\n```javascript\n// Examples\nvalidator('number') // Simple check if the value is a number\nvalidator('number', {\n    allowString: true,\n    integer: true,\n    gt: 5,\n    lte: 100\n})\n```",
            "extends": "Base"
        },
        "Presence": {
            "name": "Presence",
            "shortname": "Presence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/presence.js",
            "line": 15,
            "description": "If `true` validates that the given value is not empty, if `false`, validates that the given value is empty.\n\n #### Options\n- `ignoreBlank` (**Boolean**): If true, treats an empty or whitespace string as not present\n\n```javascript\n// Examples\nvalidator('presence', true)\nvalidator('presence', false)\nvalidator('presence', {\n  presence: true,\n  message: 'should not be empty'\n})\n\nvalidator('presence', {\n\tpresence: true,\n  ignoreBlank: true,\n  message: 'should not be empty or consist only of spaces'\n})\n```",
            "extends": "Base"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/utils/assign.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/utils/assign.js",
            "line": 6,
            "description": "Assigns a value to an object via the given path while creating new objects if\nthe pathing requires it. If the given path is `foo.bar`, it will create a new object (obj.foo)\nand assign value to obj.foo.bar. If the given object is an Ember.Object, it will create new Ember.Objects.",
            "class": "Error"
        },
        {
            "file": "addon/utils/cycle-breaker.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/utils/cycle-breaker.js",
            "line": 6,
            "description": "Use Ember Meta to break cycles in the CP chains. Lets say we have a User model with a `friends` property that is a hasMany\nrelationship. If we have a user John and he has a friend Jane, that creates a two-way relationship. John is Jane's friends and vise\nversa. If we were to go down the CP chain and get validations for John's friends, it would go to Jane, then to Jane's friends, which\nwould point back to John. This method tracks which models have been already visited and breaks the cycle.",
            "class": "Error"
        },
        {
            "file": "addon/utils/flatten.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/utils/meta-data.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/utils/should-call-super.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/utils/should-call-super.js",
            "line": 6,
            "description": "Checks if the give key exists on the object's super.\nIf so, we can successfuly call the obj[key] _super\n\nCreated by @rwjblue",
            "class": "Error"
        },
        {
            "file": "addon/utils/utils.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Error"
        },
        {
            "file": "addon/validations/error.js",
            "line": 10,
            "description": "The attribute that the error belongs to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 17,
            "description": "The parent attribute that the error belongs to",
            "itemtype": "property",
            "name": "parentAttribute",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 24,
            "description": "The error message",
            "itemtype": "property",
            "name": "message",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 87,
            "description": "Top level method that will ultimately return a mixin with all CP validations",
            "itemtype": "method",
            "name": "buildValidations",
            "params": [
                {
                    "name": "validations",
                    "description": "Validation rules",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Mixin"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 138,
            "description": "Validation rules can be created with default and global options\n{\n  description: 'Username',\n  validators: [...]\n}\nThis method generate the default options pojo, applies it to each validation rule, and flattens the object",
            "itemtype": "method",
            "name": "normalizeOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 178,
            "description": "Creates the validations class that will become `model.validations`.\n  - Setup parent validation inheritance\n  - Normalize nested keys (i.e. 'details.dob') into objects (i.e { details: { dob: validator() }})\n  - Merge normalized validations with parent\n  - Create global CPs (i.e. 'isValid', 'messages', etc...)",
            "itemtype": "method",
            "name": "createValidationsClass",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inheritedValidationsClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "owner",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 276,
            "description": "Creates the `attrs` class which holds all the CP logic\n\n```javascript\nmodel.get('validations.attrs.username');\nmodel.get('validations.attrs.nested.object.attribute');\n```",
            "itemtype": "method",
            "name": "createAttrsClass",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validatableAttributes",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "validationRules",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "owner",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 329,
            "description": "CP generator for the given attribute",
            "itemtype": "method",
            "name": "createCPValidationFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Array / Object"
                }
            ],
            "return": {
                "description": "A computed property which is a ValidationResultCollection",
                "type": "Ember.computed"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 373,
            "description": "Create a mixin that will have all the top level CPs under the validations object.\nThese are computed collections on different properties of each attribute validations CP",
            "itemtype": "method",
            "name": "createTopLevelPropsMixin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 422,
            "description": "CP dependency generator for a give attribute depending on its relationships",
            "itemtype": "method",
            "name": "getCPDependentKeysFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Array / Object"
                }
            ],
            "return": {
                "description": "Unique list of dependencies",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 456,
            "description": "Debounce handler for running a validation for the specified options",
            "itemtype": "method",
            "name": "debouncedValidate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validator",
                    "description": "",
                    "type": "Validator"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Unknown"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resolve",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 474,
            "description": "A handler used to create ValidationResult object from values returned from a validator",
            "itemtype": "method",
            "name": "validationReturnValueHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Unknown"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ValidationResult"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 505,
            "description": "Get validators for the give attribute. If they are not in the cache, then create them.",
            "itemtype": "method",
            "name": "getValidatorsFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 523,
            "description": "Get debounced validation cache for the given attribute. If it doesnt exist, create a new one.",
            "itemtype": "method",
            "name": "getValidatorCacheFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Map"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 541,
            "description": "Create validators for the give attribute and store them in a cache",
            "itemtype": "method",
            "name": "createValidatorsFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 581,
            "description": "Lookup a validators of a specific type on the owner",
            "itemtype": "method",
            "name": "lookupValidator",
            "throws": {
                "description": "Validator not found",
                "type": "Error"
            },
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "Ember.Owner"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Validator class or undefined if not found",
                "type": "Class"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 599,
            "description": "### Options\n- `on` (**Array**): Only validate the given attributes. If empty, will validate over all validatable attribute\n- `excludes` (**Array**): Exclude validation on the given attributes\n\n```javascript\nmodel.validate({ on: ['username', 'email'] }).then(({ m, validations }) => {\n  validations.get('isValid'); // true or false\n  validations.get('isValidating'); // false\n\n  let usernameValidations = m.get('validations.attrs.username');\n  usernameValidations.get('isValid') // true or false\n});\n```",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "async",
                    "description": "If `false`, will get all validations and will error if an async validations is found.\n                             If `true`, will get all validations and wrap them in a promise hash",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Promise if async is true, object if async is false",
                "type": "Promise or Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 662,
            "description": "### Options\n- `on` (**Array**): Only validate the given attributes. If empty, will validate over all validatable attribute\n- `excludes` (**Array**): Exclude validation on the given attributes\n\n```javascript\nconst { m, validations } = model.validateSync();\nvalidations.get('isValid') // true or false\n```",
            "itemtype": "method",
            "name": "validateSync",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/internal-result-object.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 38,
            "description": "A set of all validator {{#crossLink \"Result\"}}{{/crossLink}} objects for this specific attribute",
            "itemtype": "property",
            "name": "content",
            "type": "{Ember.Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 45,
            "description": "The attribute that this collection belongs to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 57,
            "description": "```javascript\n// Examples\nget(user, 'validations.isInvalid')\nget(user, 'validations.attrs.username.isInvalid')\n```",
            "itemtype": "property",
            "name": "isInvalid",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 70,
            "description": "```javascript\n// Examples\nget(user, 'validations.isValid')\nget(user, 'validations.attrs.username.isValid')\n```",
            "itemtype": "property",
            "name": "isValid",
            "default": "true",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 86,
            "description": "This property is toggled only if there is an async validation\n\n```javascript\n// Examples\nget(user, 'validations.isValidating')\nget(user, 'validations.attrs.username.isValidating')\n```",
            "itemtype": "property",
            "name": "isValidating",
            "default": "false",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 104,
            "description": "Will be true only if isValid is `true` and isValidating is `false`\n\n```javascript\n// Examples\nget(user, 'validations.isTruelyValid')\nget(user, 'validations.attrs.username.isTruelyValid')\n```",
            "itemtype": "property",
            "name": "isTruelyValid",
            "default": "true",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 122,
            "description": "Will be true is the attribute in question is not `null` or `undefined`. If the object being\nvalidated is an Ember Data Model and you have a `defaultValue` specified, then it will use that for comparison.\n\n```javascript\n// Examples\n// 'username' : DS.attr('string', { defaultValue: 'johndoe' })\nget(user, 'validations.isDirty')\nget(user, 'validations.attrs.username.isDirty')\n```",
            "itemtype": "property",
            "name": "isDirty",
            "default": "false",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 142,
            "description": "Will be `true` only if a validation returns a promise\n\n```javascript\n// Examples\nget(user, 'validations.isAsync')\nget(user, 'validations.attrs.username.isAsync')\n```",
            "itemtype": "property",
            "name": "isAsync",
            "default": "false",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 160,
            "description": "A collection of all error messages on the object in question\n\n```javascript\n// Examples\nget(user, 'validations.messages')\nget(user, 'validations.attrs.username.messages')\n```",
            "itemtype": "property",
            "name": "messages",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 179,
            "description": "An alias to the first message in the messages collection.\n\n```javascript\n// Example\nget(user, 'validations.message')\nget(user, 'validations.attrs.username.message')\n```",
            "itemtype": "property",
            "name": "message",
            "readonly": "",
            "type": "{Ember.ComputedProperty | String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 196,
            "description": "A collection of all {{#crossLink \"Error\"}}Errors{{/crossLink}} on the object in question.\nEach error object includes the error message and it's associated attribute name.\n\n```javascript\n// Example\nget(user, 'validations.errors')\nget(user, 'validations.attrs.username.errors')\n```",
            "itemtype": "property",
            "name": "errors",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 224,
            "description": "An alias to the first {{#crossLink \"Error\"}}{{/crossLink}} in the errors collection.\n\n```javascript\n// Example\nget(user, 'validations.error')\nget(user, 'validations.attrs.username.error')\n```",
            "itemtype": "property",
            "name": "error",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Error}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 241,
            "description": "All built options of the validators associated with the results in this collection grouped by validator type\n\n```javascript\n// Given the following validators\n{\n  username: [\n    validator('presence', true),\n    validator('length', { max: 15 }),\n    validator('format', { regex: /foo/ }),\n    validator('format', { regex: /bar/ }),\n  ]\n}\n```\n\n```js\nget(user, 'validations.attrs.username.options')\n```\n\nThe above will return the following\n```js\n{\n  'presence': { presence: true},\n  'length': { max: 15 },\n  'regex': [{ regex: /foo/ }, { regex: /bar/ }]\n}\n```",
            "itemtype": "property",
            "name": "options",
            "readonly": "",
            "type": "{Ember.ComputedProperty | Object}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 277,
            "itemtype": "property",
            "name": "_promise",
            "async": 1,
            "access": "private",
            "tagname": "",
            "type": "{Ember.ComputedProperty | Promise}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 291,
            "itemtype": "property",
            "name": "value",
            "type": "{Ember.ComputedProperty}",
            "access": "private",
            "tagname": "",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 300,
            "description": "Used by the `options` property to create a hash from the `content` that is grouped by validator type.\nIf there is more than 1 of a type, it groups it into an array of option objects.",
            "itemtype": "method",
            "name": "_groupValidatorOptions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 33,
            "itemtype": "property",
            "name": "model",
            "type": "{Object}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 39,
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 45,
            "itemtype": "property",
            "name": "_promise",
            "async": 1,
            "access": "private",
            "tagname": "",
            "type": "{Promise}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 53,
            "description": "The validator that returned this result",
            "itemtype": "property",
            "name": "_validator",
            "access": "private",
            "tagname": "",
            "type": "{Validator}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 61,
            "itemtype": "property",
            "name": "isValid",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 68,
            "itemtype": "property",
            "name": "isInvalid",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 75,
            "itemtype": "property",
            "name": "isValidating",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 82,
            "itemtype": "property",
            "name": "isTruelyValid",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 89,
            "itemtype": "property",
            "name": "isAsync",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 96,
            "itemtype": "property",
            "name": "isDirty",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 103,
            "itemtype": "property",
            "name": "message",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 110,
            "itemtype": "property",
            "name": "messages",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 117,
            "itemtype": "property",
            "name": "error",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 124,
            "itemtype": "property",
            "name": "errors",
            "readonly": "",
            "type": "{Ember.ComputedProperty}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 131,
            "description": "This hold all the logic for the above CPs. We do this so we can easily switch this object out with a different validations object",
            "itemtype": "property",
            "name": "_validations",
            "access": "private",
            "tagname": "",
            "type": "{Result}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 149,
            "description": "Update the current validation result object with the given result\n- If result is undefined or null, set isValid to false\n- If result is a validations object from a different model/object, set the _validations object to the one given (belongs-to)\n- If result is a collection of result objects, create a Validation Result Collection and set that to the _validations object (has-many)\n- If result is a string, set the message to the given string and set isValid to false\n- If result is a boolean, set isValid to result\n- If result is a pojo, update _validations object with the information given",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result.js",
            "line": 190,
            "description": "Promise handler",
            "itemtype": "method",
            "name": "_handlePromise",
            "access": "private",
            "tagname": "",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/validations/validator.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Alias",
            "module": "Validations"
        },
        {
            "file": "addon/validators/alias.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Alias",
            "module": "Validators"
        },
        {
            "file": "addon/validators/alias.js",
            "line": 38,
            "description": "Normalized options passed in.\n```js\nvalidator('alias', 'attribute')\n// Becomes\nvalidator('alias', {\n  alias: 'attribute'\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Alias",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 25,
            "description": "Options passed in to the validator when defined in the model",
            "itemtype": "property",
            "name": "options",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 32,
            "description": "Default validation options for this specific attribute",
            "itemtype": "property",
            "name": "defaultOptions",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 39,
            "description": "Global validation options for this model",
            "itemtype": "property",
            "name": "globalOptions",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 46,
            "description": "Model instance",
            "itemtype": "property",
            "name": "model",
            "type": "{Model}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 53,
            "description": "Attributed name of the model this validator is attached to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 60,
            "description": "Error message object. Populated by validators/messages",
            "itemtype": "property",
            "name": "errorMessages",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 67,
            "description": "Validator type",
            "itemtype": "property",
            "name": "_type",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 95,
            "description": "Build options hook. Merges default options into options object.\nThis method gets called on init and is the ideal place to normalize your options.\nThe [presence validator](https://github.com/offirgolan/ember-cp-validations/blob/master/app/validators/presence.js) is a good example to checkout",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 116,
            "description": "Creates a new object and calls any option property that is a function with the validator context.\nThis method is called right before `validate` and the returned object gets passed into the validate method as its options",
            "itemtype": "method",
            "name": "processOptions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 138,
            "description": "Used to retrieve the value to validate.\nThis method gets called right before `validate` and the returned value\ngets passed into the validate method.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The current value of `model[attribute]`"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 152,
            "description": "Wrapper method to `value` that passes the necessary parameters",
            "itemtype": "method",
            "name": "getValue",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "value",
                "type": "Unknown"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 163,
            "description": "The validate method is where all of your logic should go.\nIt will get passed in the current value of the attribute this validator is attached to.\nWithin the validator object, you will have access to the following properties:",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "The current value of the attribute",
                    "type": "Unknown"
                },
                {
                    "name": "options",
                    "description": "The built and processed options",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "The current model being evaluated",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "The current attribute being evaluated",
                    "type": "String"
                }
            ],
            "return": {
                "description": "One of the following types:\n- `Boolean`:  `true` if the current value passed the validation\n- `String`: The error message\n- `Promise`: A promise that will either resolve or reject, and will finally return either `true` or the final error message string."
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 182,
            "description": "Used by all pre-defined validators to build an error message that is present\nin `validators/message` or declared in your i18n solution.\n\nIf we extended our default messages to include `uniqueUsername: '{username} already exists'`,\nwe can use this method to generate our error message.\n\n```javascript\nvalidate(value, options) {\n  var exists = false;\n\n  options.description = 'Username';\n  options.username = value;\n\n  // check with server if username exists...\n\n  if(exists) {\n    return this.createErrorMessage('uniqueUsername', value, options);\n  }\n\n  return true;\n}\n```\n\nIf we input `johndoe` and that username already exists, the returned message would be `'johndoe already exists'`.",
            "itemtype": "method",
            "name": "createErrorMessage",
            "params": [
                {
                    "name": "type",
                    "description": "The type of message template to use",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Current value being evaluated",
                    "type": "Unknown"
                },
                {
                    "name": "options",
                    "description": "Validator built and processed options (used as the message string context)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The generated message",
                "type": "String"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 236,
            "description": "Generate the needed depenent keys for this validator",
            "itemtype": "method",
            "name": "getDependentsFor",
            "static": 1,
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dependent keys",
                "type": "Array"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/belongs-to.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Belongs To",
            "module": "Validators"
        },
        {
            "file": "addon/validators/collection.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Collection",
            "module": "Validators"
        },
        {
            "file": "addon/validators/collection.js",
            "line": 33,
            "description": "Normalized options passed in.\n```js\nvalidator('collection', true)\n// Becomes\nvalidator('collection', {\n  collection: true\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Collection",
            "module": "Validators"
        },
        {
            "file": "addon/validators/confirmation.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Confirmation",
            "module": "Validators"
        },
        {
            "file": "addon/validators/date.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Date",
            "module": "Validators"
        },
        {
            "file": "addon/validators/dependent.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Dependent",
            "module": "Validators"
        },
        {
            "file": "addon/validators/ds-error.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "DS Error",
            "module": "Validators"
        },
        {
            "file": "addon/validators/exclusion.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Exclusion",
            "module": "Validators"
        },
        {
            "file": "addon/validators/format.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Format",
            "module": "Validators"
        },
        {
            "file": "addon/validators/format.js",
            "line": 62,
            "description": "Normalized options passed in by applying the desired regex or using the one declared",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Format",
            "module": "Validators"
        },
        {
            "file": "addon/validators/has-many.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Has Many",
            "module": "Validators"
        },
        {
            "file": "addon/validators/inclusion.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Inclusion",
            "module": "Validators"
        },
        {
            "file": "addon/validators/length.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Length",
            "module": "Validators"
        },
        {
            "file": "addon/validators/length.js",
            "line": 41,
            "description": "Default allowNone to true",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Length",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 35,
            "description": "Regex for matching error message placeholders",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_regex",
            "type": "{RegExp}",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 43,
            "description": "Default attribute description if one isnt passed into a validator's options",
            "itemtype": "property",
            "name": "defaultDescription",
            "type": "{String}",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 50,
            "description": "Get a description for a specific attribute. This is a hook\nfor i18n solutions to retrieve attribute descriptions from a translation",
            "itemtype": "method",
            "name": "getDescriptionFor",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 62,
            "description": "Get a message with a given type",
            "itemtype": "method",
            "name": "getMessageFor",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 73,
            "description": "Regex replace all placeholders with their given context",
            "itemtype": "method",
            "name": "formatMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/messages.js",
            "line": 89,
            "description": "Default validation error message strings",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "addon/validators/number.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Number",
            "module": "Validators"
        },
        {
            "file": "addon/validators/presence.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "Presence",
            "module": "Validators"
        },
        {
            "file": "addon/validators/presence.js",
            "line": 43,
            "description": "Normalized options passed in.\n```js\nvalidator('presence', true)\n// Becomes\nvalidator('presence', {\n  presence: true\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Presence",
            "module": "Validators"
        },
        {
            "file": "addon/validators/presence.js",
            "line": 84,
            "description": "Handle presence of ember proxy based instances",
            "class": "Presence",
            "module": "Validators"
        },
        {
            "file": "addon/index.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "",
            "module": "Validators"
        },
        {
            "file": "app/validators/messages.js",
            "line": 1,
            "description": "Copyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "class": "",
            "module": "Home"
        },
        {
            "file": "htmlbars-plugins/v-get.js",
            "line": 94,
            "description": "{{#if (v-get model 'username' 'isValid')}} {{/if}}",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "AST.Node"
                }
            ],
            "class": "",
            "module": "Templating"
        },
        {
            "file": "htmlbars-plugins/v-get.js",
            "line": 113,
            "description": "{{x-component prop=(v-get model 'isValid')}}",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "AST.Node"
                }
            ],
            "class": "",
            "module": "Templating"
        },
        {
            "file": "htmlbars-plugins/v-get.js",
            "line": 132,
            "description": "<button type=\"submit\" disabled={{v-get model 'isInvalid'}}>Submit</button> (node.attributes)\n<div class=\"form-group {{if (v-get model 'isInvalid') 'has-error'}}\">",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "AST.Node"
                }
            ],
            "class": "",
            "module": "Templating"
        },
        {
            "file": "htmlbars-plugins/v-get.js",
            "line": 154,
            "description": "Transform (v-get model 'username' 'isValid') to (get (get model.validations.attrs 'username') 'isValid') OR\n(v-get model 'isValid') to (get model.validations 'isValid')",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "AST.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "AST.Node"
            },
            "class": "",
            "module": "Templating"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/assign.js:1"
        },
        {
            "message": "Missing item type\nAssigns a value to an object via the given path while creating new objects if\nthe pathing requires it. If the given path is `foo.bar`, it will create a new object (obj.foo)\nand assign value to obj.foo.bar. If the given object is an Ember.Object, it will create new Ember.Objects.",
            "line": " addon/utils/assign.js:6"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/cycle-breaker.js:1"
        },
        {
            "message": "Missing item type\nUse Ember Meta to break cycles in the CP chains. Lets say we have a User model with a `friends` property that is a hasMany\nrelationship. If we have a user John and he has a friend Jane, that creates a two-way relationship. John is Jane's friends and vise\nversa. If we were to go down the CP chain and get validations for John's friends, it would go to Jane, then to Jane's friends, which\nwould point back to John. This method tracks which models have been already visited and breaks the cycle.",
            "line": " addon/utils/cycle-breaker.js:6"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/flatten.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/meta-data.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/should-call-super.js:1"
        },
        {
            "message": "Missing item type\nChecks if the give key exists on the object's super.\nIf so, we can successfuly call the obj[key] _super\n\nCreated by @rwjblue",
            "line": " addon/utils/should-call-super.js:6"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/utils/utils.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validations/factory.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validations/internal-result-object.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validations/result-collection.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validations/result.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validations/validator.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/alias.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/base.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/belongs-to.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/collection.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/confirmation.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/date.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/dependent.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/ds-error.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/exclusion.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/format.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/has-many.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/inclusion.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/length.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/messages.js:1"
        },
        {
            "message": "Missing item type\nDefault validation error message strings",
            "line": " addon/validators/messages.js:89"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/number.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/validators/presence.js:1"
        },
        {
            "message": "Missing item type\nHandle presence of ember proxy based instances",
            "line": " addon/validators/presence.js:84"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " addon/index.js:1"
        },
        {
            "message": "Missing item type\nCopyright 2016, Yahoo! Inc.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
            "line": " app/validators/messages.js:1"
        },
        {
            "message": "Missing item type\n{{#if (v-get model 'username' 'isValid')}} {{/if}}",
            "line": " htmlbars-plugins/v-get.js:94"
        },
        {
            "message": "Missing item type\n{{x-component prop=(v-get model 'isValid')}}",
            "line": " htmlbars-plugins/v-get.js:113"
        },
        {
            "message": "Missing item type\n<button type=\"submit\" disabled={{v-get model 'isInvalid'}}>Submit</button> (node.attributes)\n<div class=\"form-group {{if (v-get model 'isInvalid') 'has-error'}}\">",
            "line": " htmlbars-plugins/v-get.js:132"
        },
        {
            "message": "Missing item type\nTransform (v-get model 'username' 'isValid') to (get (get model.validations.attrs 'username') 'isValid') OR\n(v-get model 'isValid') to (get model.validations 'isValid')",
            "line": " htmlbars-plugins/v-get.js:154"
        }
    ]
}